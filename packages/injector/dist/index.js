"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = inject;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const vm_1 = __importDefault(require("vm"));
const plugin_1 = require("./utils/plugin");
function inject(path, jsFile, infoFile, setupFile) {
    const root = fs_1.default.existsSync((0, path_1.join)(path, "www/js")) ? (0, path_1.join)(path, "www") : path;
    global.root = root;
    const plugins = loadPluginsJS(root);
    injectPlugins(root, plugins, jsFile, infoFile, setupFile);
    patchPluginJS(root, plugins);
}
function loadPluginsJS(root) {
    const content = fs_1.default.readFileSync((0, plugin_1.getPluginJSPath)(root), "utf8");
    const context = {};
    vm_1.default.runInNewContext(content, context);
    return context.$plugins;
}
function injectPlugins(root, plugins, jsFile, infoFile, setupFile) {
    const info = require(infoFile);
    console.log(`Injecting plugin ${info.name}...`);
    if (setupFile && fs_1.default.existsSync(setupFile))
        require(setupFile);
    fs_1.default.copyFileSync(jsFile, (0, path_1.join)(root, "js", "plugins", info.name + ".js"));
    if (!plugins.find((x) => x.name === info.name)) {
        plugins.push(info);
    }
    else {
        console.warn(`Plugin ${info.name} already exists. Overwriting.`);
    }
}
function patchPluginJS(root, plugins) {
    const content = `// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins = ${JSON.stringify(plugins, null, 4)};`;
    fs_1.default.writeFileSync((0, plugin_1.getPluginJSPath)(root), content, "utf8");
}
