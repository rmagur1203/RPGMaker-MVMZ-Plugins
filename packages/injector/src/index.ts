import fs from "fs";
import path, { join } from "path";
import vm from "vm";
import { getPluginJSPath } from "./utils/plugin";

type Plugin = {
  name: string;
  status: boolean;
  description: string;
  parameters: Record<string, unknown>;
};

export default function inject(
  path: string,
  jsFile: string,
  infoFile: string,
  setupFile?: string
) {
  const root = fs.existsSync(join(path, "www")) ? join(path, "www") : path;
  global.root = root;

  const plugins = loadPluginsJS(root);

  injectPlugins(root, plugins, jsFile, infoFile, setupFile);

  patchPluginJS(root, plugins);
}

function loadPluginsJS(root: string): Plugin[] {
  const content = fs.readFileSync(getPluginJSPath(root), "utf8");

  const context: any = {};

  vm.runInNewContext(content, context);

  return context.$plugins;
}

function injectPlugins(
  root: string,
  plugins: Plugin[],
  jsFile: string,
  infoFile: string,
  setupFile?: string
) {
  const info: Plugin = require(infoFile);
  console.log(`Injecting plugin ${info.name}...`);
  if (setupFile && fs.existsSync(setupFile)) require(setupFile);

  fs.copyFileSync(jsFile, join(root, "js", "plugins", info.name + ".js"));

  if (!plugins.find((x) => x.name === info.name)) {
    plugins.push(info);
  } else {
    console.warn(`Plugin ${info.name} already exists. Overwriting.`);
  }
}

function patchPluginJS(root: string, plugins: Plugin[]) {
  const content = `// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins = ${JSON.stringify(plugins, null, 4)};`;

  fs.writeFileSync(getPluginJSPath(root), content, "utf8");
}
